.home-page {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background-color: #282828;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  overflow-y: scroll;
}

.phone-container {
  display: flex;
  flex-direction: column;
  width: 305px;
  height: 667px;
  background-color: #084183;
  border-radius: 13px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  overflow-y: auto;
  justify-content: space-between;
}

.home-page h3 {
  color: #ffffff;
  margin-bottom: 10px;
  text-align: center;
}

.home-bar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  margin-bottom: 20px;
}

.chevron-icon {
  color: #ffffff;
  cursor: pointer;
}

.logo-link {
  display: flex;
  align-items: center;
}

.logo {
  height: 50px;
}

.user-icon {
  color: #ffffff;
  cursor: pointer;
}

.top_bar {
  display: none;
}

.notepad-container {
  flex-grow: 1;
  background: transparent;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258);
  border-radius: 5px;
  margin-bottom: 10px;
  overflow-y: auto;
  overflow-x: hidden;
  min-height: 200px;
  padding: 10px;
}

.notepad-container h2 {
  color: #ffffff;
  margin-bottom: 10px;
  font-size: 24px;
}

.objective-input {
  width: 92%;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
  padding: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258);
}

.objectives-list {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.objective-item {
  width: 92%;
  display: flex;
  align-items: center;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258);
  padding: 8px;
  background-color: #ffffff11;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.objective-item.completed {
  background-color: #28a745;
  color: #ffffff;
}

.objective-item span {
  font-size: 19px;
  color: #ffffff;
}

.objective-item.completed span {
  color: #ffffff;
}

.edit-input {
  margin-left: 10px;
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
  flex-grow: 1;
}

.checkbox {
  margin-right: 10px;
  cursor: pointer;
}

.notepad-controls {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 10px;
}

.edit-icon, .delete-icon, .save-icon {
  color: #ffffff;
  cursor: pointer;
}

.edit-icon:hover, .delete-icon:hover, .save-icon:hover {
  color: #28a745;
}

.chart-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 20px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258);
  margin-top: 20px;
  padding: 10px;
  background: #ffffff11;
  border-radius: 5px;
}

.clock-container {
  width: 100%;
  margin-bottom: 10px;
}

.clock-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.clock-label {
  color: #ffffff;
  font-size: 16px;
  font-weight: bold;
}

.clock-value {
  color: #ffffff;
  font-size: 16px;
}

.chart-wrapper {
  width: 200px;
  height: 200px;
  margin-bottom: 10px;
}

.legend {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

.legend-item {
  display: flex;
  align-items: center;
  margin-bottom: 5px;
  color: #ffffff;
  font-size: 14px;
}

.color-box {
  width: 12px;
  height: 12px;
  margin-right: 8px;
  border-radius: 2px;
}

.calorie-settings {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
  padding: 10px;
  background: #ffffff11;
  border-radius: 5px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258);
}

.calorie-settings label {
  color: #ffffff;
  margin-right: 10px;
  font-size: 16px;
}

.calorie-input {
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
  width: 100px;
  margin-right: 10px;
}

.save-calorie-btn {
  padding: 5px 10px;
  background-color: #184d8b;
  color: #ffffff;
  font-weight: bold;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258);
}

.save-calorie-btn:hover {
  background-color: #000000;
  transition: 0.5s ease;
}

.bottom-buttons {
  display: flex;
  flex-direction: column;
  width: 100%;
  gap: 10px;
  margin-top: auto;
}

.workout-btn, .session-btn {
  padding: 10px;
  background-color: #184d8b !important;
  color: #ffffff;
  font-weight: bold;
  font-size: 16px;
  text-transform: uppercase;
  border: none;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258);
  border-radius: 5px;
  cursor: pointer;
  width: 100%;
  text-align: left;
  margin: -10px auto 20px;
}

.session-btn:hover, .workout-btn:hover {
  background-color: #000000;
  color: #ffffff;
  transition: 0.5s ease;
}import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './home.css';
import { ChevronLeft, User, Edit2, Trash2, Save } from 'react-feather';
import logo from '../Assets/logo.png';
import { db, auth } from '../firebase/db';
import { doc, getDoc, updateDoc, collection, getDocs } from 'firebase/firestore';
import { Chart } from 'chart.js/auto';
import CurrentSession from './CurrentSession';

function Home() {
  const navigate = useNavigate();
  const [objectives, setObjectives] = useState([]);
  const [newObjective, setNewObjective] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [calorieObjective, setCalorieObjective] = useState(1000); // Default calorie objective
  const [calorieObjectiveSetTime, setCalorieObjectiveSetTime] = useState(null); // Track when calorie goal was set
  const [history, setHistory] = useState([]);
  const [sessions, setSessions] = useState([]);
  const [exercises, setExercises] = useState([]);
  const user = auth.currentUser;
  const [userData, setUserData] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      if (user) {
        const username = user.displayName || user.email.split('@')[0];
        const userDocRef = doc(db, 'users', username);
        const userDocSnap = await getDoc(userDocRef);
        const userData = userDocSnap.exists() ? userDocSnap.data() : { objectives: [], history: [], sessions: [], calorieObjective: 1000, calorieObjectiveSetTime: null };
        setObjectives(userData.objectives || []);
        setHistory(userData.history || []);
        setSessions(userData.sessions || []);
        setCalorieObjective(userData.calorieObjective || 1000);
        setCalorieObjectiveSetTime(userData.calorieObjectiveSetTime || new Date().toISOString()); // Default to now if not set

        const exerciseSnapshot = await getDocs(collection(db, 'exercises'));
        const exerciseList = exerciseSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setExercises(exerciseList);
      }
    };
    fetchData();
  }, [user]);

  useEffect(() => {
    const timer = setInterval(() => {
      setCalorieObjectiveSetTime(prev => prev); // Trigger re-render to update clock
    }, 1000); // Update every second
    return () => clearInterval(timer); // Cleanup on unmount
  }, []);

  const addObjective = () => {
    if (newObjective.trim() && user) {
      const username = user.displayName || user.email.split('@')[0];
      const userDocRef = doc(db, 'users', username);
      const updatedObjectives = [...objectives, { text: newObjective.trim(), completed: false }];
      setObjectives(updatedObjectives);
      setNewObjective('');
      updateDoc(userDocRef, { objectives: updatedObjectives });
    }
  };

  const toggleObjective = (index) => {
    const updatedObjectives = [...objectives];
    updatedObjectives[index].completed = !updatedObjectives[index].completed;
    setObjectives(updatedObjectives);
    const username = user.displayName || user.email.split('@')[0];
    updateDoc(doc(db, 'users', username), { objectives: updatedObjectives });
  };

  const updateObjectiveText = (index, newText) => {
    const updatedObjectives = [...objectives];
    updatedObjectives[index].text = newText;
    setObjectives(updatedObjectives);
  };

  const clearObjectives = () => {
    if (user) {
      const username = user.displayName || user.email.split('@')[0];
      setObjectives([]);
      updateDoc(doc(db, 'users', username), { objectives: [] });
    }
  };

  const saveObjectives = () => {
    const username = user.displayName || user.email.split('@')[0];
    updateDoc(doc(db, 'users', username), { objectives });
    setIsEditing(false);
  };

  const updateSessionInFirestore = async (username, updatedSessions) => {
    const userDocRef = doc(db, 'users', username);
    await updateDoc(userDocRef, { sessions: updatedSessions });
  };

const calculateCalories = (exercise) => {

  if (!exercise || !exercise.minCalories) return 0;
  const userWeight = userData?.weight || 70; // Replace with actual user weight
  if (exercise.type === 'cardio') {
    const met = exercise.met || 3;
    const durationMinutes = exercise.duration || 1;
    return Math.round(met * userWeight * durationMinutes / 60);
  } else {
    const intensityFactor = exercise.intensity === 'high' ? 1.5 : exercise.intensity === 'medium' ? 1.0 : 0.5;
    const caloriesPerSet = (userWeight + (exercise.weight || 0)) * intensityFactor * 0.1;
    return Math.round(caloriesPerSet * (exercise.sets || 1));
  }
};

  const calculateTotalCalories = () => {
    if (!sessions.length) return 0;
    const currentSession = sessions[sessions.length - 1];
    return currentSession.exercises.reduce((total, exercise) => total + calculateCalories(exercise), 0);
  };

  const startSession = () => {
    if (sessions.length > 0 && sessions[sessions.length - 1].exercises.length > 0) {
      navigate('/session', { state: { session: sessions[sessions.length - 1] } });
    }
  };

  const saveCalorieObjective = () => {
    if (user) {
      const username = user.displayName || user.email.split('@')[0];
      const userDocRef = doc(db, 'users', username);
      const now = new Date().toISOString();
      updateDoc(userDocRef, { calorieObjective, calorieObjectiveSetTime: now });
      setCalorieObjectiveSetTime(now); // Update local state immediately
    }
  };

  const getTimeRemaining = () => {
    if (!calorieObjectiveSetTime) return "N/A";
    const setTime = new Date(calorieObjectiveSetTime);
    const endTime = new Date(setTime.getTime() + 24 * 60 * 60 * 1000); // 24 hours from set time
    const now = new Date();
    const diffMs = endTime - now;
    if (diffMs <= 0) return "Expired";
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    const diffSeconds = Math.floor((diffMs % (1000 * 60)) / 1000);
    return `${diffHours}h ${diffMinutes}m ${diffSeconds}s`;
  };

  useEffect(() => {
    const ctx = document.getElementById('calorieChart').getContext('2d');
    const totalBurned = history.reduce((sum, entry) => sum + (entry.totalCalories || 0), 0);
    let myChart = Chart.getChart('calorieChart');
    if (myChart) myChart.destroy();

    new Chart(ctx, {
      type: 'pie',
      data: {
        labels: ['Burned', 'Remaining'],
        datasets: [{
          data: [totalBurned, Math.max(0, calorieObjective - totalBurned)],
          backgroundColor: ['#28a745', '#e0e0e0']
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false
      }
    });
  }, [calorieObjective, history]);

  return (
    <div className='home-page'>
      <div className='phone-container'>
        <div className='home-bar' style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginTop: '-20px' }}>
          <div>
            <ChevronLeft className='chevron-icon' onClick={() => navigate(-1)} />
          </div>
          <div>
            <a href='/' className='logo-link'>
              <img src={logo} alt='GymTrakr Logo' className='logo' />
            </a>
          </div>
          <div>
            <User className='user-icon' />
          </div>
        </div>
        <div className='home-message'>
          <h3 className='welcome-message'>Welcome, {user ? (user.displayName ? user.displayName : user.email.split('@')[0]) : 'User'}!</h3>
        </div>
        <div className='notepad-container'>
          <h2>Objectives</h2>
          <input
            type="text"
            value={newObjective}
            onChange={(e) => setNewObjective(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && addObjective()}
            placeholder="Add new objective"
            className="objective-input"
          />
          <div className='objectives-list'>
            {objectives.map((obj, index) => (
              <div
                key={index}
                className={`objective-item ${obj.completed ? 'completed' : ''}`}
                onClick={() => !isEditing && toggleObjective(index)}
              >
                <input
                  type="checkbox"
                  checked={obj.completed}
                  onChange={() => !isEditing && toggleObjective(index)}
                  className='checkbox'
                  disabled={isEditing}
                />
                {isEditing ? (
                  <input
                    type="text"
                    value={obj.text}
                    onChange={(e) => updateObjectiveText(index, e.target.value)}
                    className="edit-input"
                  />
                ) : (
                  <span>{obj.text}</span>
                )}
              </div>
            ))}
          </div>
          <div className='notepad-controls'>
            <Edit2 className='edit-icon' onClick={() => setIsEditing(true)} />
            <Trash2 className='delete-icon' onClick={clearObjectives} />
            {isEditing && <Save className='save-icon' onClick={saveObjectives} />}
          </div>
        </div>
        <div className='chart-section'>
          <div className='clock-container'>
            <div className='clock-row' style={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>
              <span className='clock-label'>Time Remaining</span>
              <span className='clock-value'>{getTimeRemaining()}</span>
            </div>
          </div>
          <div className='chart-wrapper'>
            <canvas id="calorieChart" height="200"></canvas>
          </div>
          <div className='legend'>
            <div className='legend-item'><span className='color-box' style={{ backgroundColor: '#28a745' }}></span>Set Calories: {calorieObjective} kcal</div>
            <div className='legend-item'><span className='color-box' style={{ backgroundColor: '#e0e0e0' }}></span>Remaining: {Math.max(0, calorieObjective - history.reduce((sum, entry) => sum + (entry.totalCalories || 0), 0))} kcal</div>
            <div className='legend-item'><span className='color-box' style={{ backgroundColor: '#28a745' }}></span>Burned: {history.reduce((sum, entry) => sum + (entry.totalCalories || 0), 0)} kcal</div>
          </div>
        </div>
        <div className='calorie-settings'>
          <label htmlFor="calorie-input">Set Calorie Goal: </label>
          <input
            type="number"
            id="calorie-input"
            value={calorieObjective}
            onChange={(e) => setCalorieObjective(parseInt(e.target.value) || 0)}
            min="0"
            className="calorie-input"
          />
          <button onClick={saveCalorieObjective} className="save-calorie-btn">Save</button>
        </div>
        <div className='bottom-buttons'>
          <CurrentSession
            sessions={sessions}
            setSessions={setSessions}
            exercises={exercises}
            user={user}
            updateSessionInFirestore={updateSessionInFirestore}
            calculateCalories={calculateCalories}
            calculateTotalCalories={calculateTotalCalories}
            startSession={startSession}
          />
          <button className='workout-btn' onClick={() => navigate('/workout')}>Workout</button>
        </div>
      </div>
    </div>
  );
}

export default Home;.workout-page {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background-color: #282828;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.phone-container {
  display: flex;
  flex-direction: column;
  width: 305px;
  height: 667px;
  background-color: #084183;
  border-radius: 13px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  overflow-y: auto;
}

.phone-bar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  margin-bottom: 20px;
}

.chevron-icon {
  color: #ffffff;
  cursor: pointer;
}

.logo-link {
  display: flex;
  align-items: center;
}

.logo {
  height: 50px;
}

.top_bar {
  display: flex;
  justify-content: baseline;
  width: 50px;
  height: 8px;
  margin-top: 20px;
  margin-left: 50%;
  border-radius: 8px;
  background: linear-gradient(to right, #ffffff, #0056b3);
}

.workout-sessions {
  display: flex;
  flex-direction: column;
  width: 100%;
  margin-top: 20px;
  gap: 10px;
}

.workout-sessions-title {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding: 10px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  background-color: #ffffff;
  color: #084183;
  cursor: pointer;
}

.workout-sessions-title:hover {
  background-color: #017cff6f;
}

.sess-title {
  font-size: 18px;
  font-weight: bold;
  margin: 0;
  text-transform: uppercase;
}

.expandable-section {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-out;
  background-color: #ffffff;
  color: #ffffff;
  padding: 0 10px;
}

.expandable-section.active {
  max-height: 500px;
  padding: 10px;
  overflow-y: scroll;
  background: rgba(0, 0, 0, 0.231)  !important;
}

.exercise-item {
  margin: 10px 0;
  padding: 5px;
  border-bottom: 1px solid #0066ff;
  font-size: 18px;
}

.exercise-item p {
  font-size: 17px !important;
}

.exercise-item:hover {
  background-color: #f0f0f0;
}

.exercise-controls {
  margin-top: 5px;
}

.exercise-controls button {
  padding: 5px 10px;
  margin-right: 5px;
  background-color: #007bff;
  color: #ffffff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.exercise-controls button:hover {
  background-color: #0056b3;
}

.bottom-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 10px;
}

.trash-btn {
  margin-top: 10px;
  padding: 5px;
  cursor: pointer;
}

.trash-btn:hover {
  background-color: #ff4d4d !important;
  color: #ffffff;
  border: none;
  transition: 0.5s ease;
}

.tutorial-link {
  display: block;
  color: #007bff;
  text-decoration: none;
  margin-top: 5px;
  font-size: 14px;
}

.tutorial-link:hover {
  text-decoration: underline;
}

.session-actions {
  margin-top: 10px;
  display: flex;
  gap: 10px;
}

.add-btn {
  padding: 3px 3px;
  background-color: #dfdfdf;
  color: #000000;
  font-weight: bold;
  text-transform: uppercase;
  border: none;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  border-radius: 5px;
  cursor: pointer;
  width: 120px;
}

.add-btn:hover {
  background-color: #000000;
  color: #ffffff;
  transition: 0.5s ease;
}

.dropdown {
  position: relative;
  display: flex;
  flex-direction: column;
}

.dropdown select {
  padding: 5px;
  margin-bottom: 5px;
  border-radius: 5px;
  background-color: #fff;
  border: 1px solid #ccc;
}

.dropdown button {
  padding: 5px 10px;
  background-color: #007bff;
  color: #ffffff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.dropdown button:hover {
  background-color: #0056b3;
}

.start-btn {
  padding: 5px 10px;
  background-color: #dfdfdf;
  color: #000000;
  font-weight: bold;
  text-transform: uppercase;
  border: none;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  border-radius: 5px;
  cursor: pointer;
  width: 120px;
}

.start-btn:hover {
  background-color: #000000;
  color: #ffffff;
  transition: 0.5s ease;
}

.workout-content {
  flex-grow: 1;
  color: #ffffff;
  padding: 10px;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.workout-content h2 {
  text-align: center;
  margin-bottom: 20px;
  font-size: 24px;
}

.workout-section {
  width: 50%;
  display: flex;
  text-align: center;
  flex-direction: column;
  align-items: center;
  border-radius: 10px;
  color: white;
  padding: 10px;
  margin-bottom: 15px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.workout-section:hover {
  background-color: #017cff6f;
  cursor: pointer;
}

.workout-section p {
  margin: 0;
  font-size: 16px;
  color: #ffffff;
  font-weight: bold;
}

.section-image {
  width: 150px;
  height: 150px;
  margin-right: 15px;
  border-radius: 5px;
}

.section-info {
  display: flex;
  flex-direction: column;
}

.section-info h3 {
  margin: 0;
  font-size: 18px;
  color: #ffffff;
}

.counter {
  margin: 5px 0 0;
  font-size: 16px;
  color: #ffffff;
  font-weight: bold;
}import React, { useState, useEffect } from 'react';
import './workout.css';
import { ChevronLeft, Plus, Trash2 } from 'react-feather';
import logo from '../Assets/logo.png';
import Cardio from '../Assets/cardio.png';
import Chest from '../Assets/chest.png';
import Abs from '../Assets/abs.png';
import Arms from '../Assets/arms.png';
import { useNavigate } from 'react-router-dom';
import { db, auth } from '../firebase/db';
import { collection, getDocs, doc, getDoc, updateDoc } from 'firebase/firestore';
import CurrentSession from './CurrentSession';

function Workout() {
  const navigate = useNavigate();
  const [showCurrentSession, setShowCurrentSession] = useState(false);
  const [showHistory, setShowHistory] = useState(false);
  const [sessions, setSessions] = useState([]);
  const [exercises, setExercises] = useState([]);
  const [showDropdown, setShowDropdown] = useState(false);
  const [selectedExercise, setSelectedExercise] = useState('');
  const [userData, setUserData] = useState(null);
  const user = auth.currentUser;

  useEffect(() => {
    const fetchData = async () => {
      if (user) {
        const username = user.displayName || user.email.split('@')[0];
        const userDocRef = doc(db, 'users', username);
        const userDocSnap = await getDoc(userDocRef);
        const userData = userDocSnap.exists() ? userDocSnap.data() : { sessions: [], height: 0, weight: 0, age: 0, gender: '' };
        setUserData(userData);
        setSessions(userData.sessions || []);

        const exerciseSnapshot = await getDocs(collection(db, 'exercises'));
        const exerciseList = exerciseSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        setExercises(exerciseList);
      }
    };
    fetchData();
  }, [user]);

  const handleSectionClick = (type) => {
    navigate(`/${type.toLowerCase()}-exercise`);
  };

  const currentSession = sessions.length > 0 ? sessions[sessions.length - 1] : null;

  const addExerciseToSession = () => {
    if (!user || !selectedExercise || !currentSession) return;
    const username = user.displayName || user.email.split('@')[0];
    const exercise = exercises.find(e => e.id === selectedExercise);
    if (exercise) {
      const updatedSession = {
        ...currentSession,
        exercises: [
          ...currentSession.exercises,
          { id: exercise.id, name: exercise.name, reps: exercise.type === 'cardio' ? 0 : 0, duration: exercise.type === 'cardio' ? 0 : undefined, laps: 0, videoUrl: exercise.videoUrl, minCalories: exercise.minCalories || 10, type: exercise.type }
        ]
      };
      const updatedSessions = [...sessions];
      updatedSessions[sessions.length - 1] = updatedSession;
      setSessions(updatedSessions);
      setShowDropdown(false);
      setSelectedExercise('');
      updateSessionInFirestore(username, updatedSessions);
    }
  };

  const updateRepsLaps = (index, field, delta) => {
    if (!currentSession) return;
    const username = user.displayName || user.email.split('@')[0];
    const updatedSession = { ...currentSession };
    const exercise = updatedSession.exercises[index];
    if (exercise.type === 'cardio' && field === 'reps') {
      updatedSession.exercises[index].duration = Math.max(0, (exercise.duration || 0) + delta);
    } else {
      updatedSession.exercises[index][field] = Math.max(0, (exercise[field] || 0) + delta);
    }
    const updatedSessions = [...sessions];
    updatedSessions[sessions.length - 1] = updatedSession;
    setSessions(updatedSessions);
    updateSessionInFirestore(username, updatedSessions);
  };

  const removeExercise = (index) => {
    if (!currentSession) return;
    const username = user.displayName || user.email.split('@')[0];
    const updatedSession = { ...currentSession };
    updatedSession.exercises.splice(index, 1);
    const updatedSessions = [...sessions];
    updatedSessions[sessions.length - 1] = updatedSession;
    setSessions(updatedSessions);
    updateSessionInFirestore(username, updatedSessions);
  };

  const updateSessionInFirestore = async (username, updatedSessions) => {
    const userDocRef = doc(db, 'users', username);
    await updateDoc(userDocRef, { sessions: updatedSessions });
  };

const calculateCalories = (exercise) => {
  if (!exercise || !exercise.minCalories) return 0;
  const userWeight = userData?.weight || 70; // Replace with actual user weight
  if (exercise.type === 'cardio') {
    const met = exercise.met || 3;
    const durationMinutes = exercise.duration || 1;
    return Math.round(met * userWeight * durationMinutes / 60);
  } else {
    const intensityFactor = exercise.intensity === 'high' ? 1.5 : exercise.intensity === 'medium' ? 1.0 : 0.5;
    const caloriesPerSet = (userWeight + (exercise.weight || 0)) * intensityFactor * 0.1;
    return Math.round(caloriesPerSet * (exercise.sets || 1));
  }
};

  const calculateTotalCalories = () => {
    if (!currentSession) return 0;
    return currentSession.exercises.reduce((total, exercise) => total + calculateCalories(exercise), 0);
  };

  const startSession = () => {
    if (currentSession && currentSession.exercises.length > 0) {
      navigate('/session', { state: { session: currentSession } });
    }
  };

  return (
    <div className='workout-page'>
      <div className='phone-container'>
        <div className='phone-bar'>
          <ChevronLeft className='chevron-icon' onClick={() => navigate(-1)} />
          <div className='phone-bar'>
            <h1 className='top_bar'></h1>
          </div>
          <a href='/home' className='logo-link'>
            <img src={logo} alt='GymTrakr Logo' className='logo' />
          </a>
        </div>
        <div className='workout-sessions'>
          <div className='workout-sessions-title' onClick={() => setShowCurrentSession(!showCurrentSession)}>
            <p className='sess-title'>Current Session</p>
          </div>
          <div className={showCurrentSession ? 'expandable-section active' : 'expandable-section'}>
            {currentSession ? (
              <div>
                <h3>Session Date: {new Date(currentSession.date).toLocaleString()}</h3>
                {currentSession.exercises.map((exercise, index) => (
                  <div key={index} className='exercise-item'>
                    <p>{exercise.name}: {exercise.type === 'cardio' ? `${exercise.duration} min, ${exercise.laps} laps` : `${exercise.reps} reps, ${exercise.laps} laps`}</p>
                    <div className='exercise-controls'>
                      {exercise.type === 'cardio' ? (
                        <>
                          <button onClick={() => updateRepsLaps(index, 'reps', -1)}>-</button>
                          <span> Min </span>
                          <button onClick={() => updateRepsLaps(index, 'reps', 1)}>+</button>
                          <span> </span>
                          <button onClick={() => updateRepsLaps(index, 'laps', -1)}>-</button>
                          <span> Laps </span>
                          <button onClick={() => updateRepsLaps(index, 'laps', 1)}>+</button>
                        </>
                      ) : (
                        <>
                          <button onClick={() => updateRepsLaps(index, 'reps', -1)}>-</button>
                          <span> Reps </span>
                          <button onClick={() => updateRepsLaps(index, 'reps', 1)}>+</button>
                          <span> </span>
                          <button onClick={() => updateRepsLaps(index, 'laps', -1)}>-</button>
                          <span> Laps </span>
                          <button onClick={() => updateRepsLaps(index, 'laps', 1)}>+</button>
                        </>
                      )}
                    </div>
                    <div className='bottom-controls'>
                      <div>
                        <a href={exercise.videoUrl} target="_blank" rel="noopener noreferrer" className="tutorial-link">Tutorial</a>
                      </div>
                      <div className='trash-btn'>
                        <Trash2 size={18} color="#8b0000" onClick={() => removeExercise(index)} />
                      </div>
                    </div>
                    <span className='calorie-info'>Calories: {calculateCalories(exercise)} kcal</span>
                  </div>
                ))}
                <div className='total-calories'>
                  <span>Total Calories: {calculateTotalCalories()} kcal</span>
                </div>
                <div className='session-actions'>
                  <button className='add-btn' onClick={() => setShowDropdown(!showDropdown)}>
                    <Plus size={18} style={{ translate: '-4px 3px' }} color="#000000" />
                    Add Exercise
                  </button>
                  {showDropdown && (
                    <div className='dropdown'>
                      <select value={selectedExercise} onChange={(e) => setSelectedExercise(e.target.value)}>
                        <option value="">Select Exercise</option>
                        {exercises.map((exercise) => (
                          <option key={exercise.id} value={exercise.id}>{exercise.name}</option>
                        ))}
                      </select>
                      <button onClick={addExerciseToSession}>Add</button>
                    </div>
                  )}
                  <button className='start-btn' onClick={startSession}>Start Session</button>
                </div>
              </div>
            ) : (
              <p>No current session available.</p>
            )}
          </div>
          <div className='workout-sessions-title' onClick={() => setShowHistory(!showHistory)}>
            <p className='sess-title'>History</p>
          </div>
          <div className={showHistory ? 'expandable-section active' : 'expandable-section'}>
            {sessions.length > 0 ? (
              sessions.map((session, index) => (
                <div key={index}>
                  <h3>Session Date: {new Date(session.date).toLocaleString()}</h3>
                  {session.exercises.map((exercise, exIndex) => (
                    <div key={exIndex}>
                      <p>{exercise.name}: {exercise.type === 'cardio' ? `${exercise.duration} min, ${exercise.laps} laps` : `${exercise.reps} reps, ${exercise.laps} laps`}</p>
                      <a href={exercise.videoUrl} target="_blank" rel="noopener noreferrer" className="tutorial-link">Tutorial</a>
                    </div>
                  ))}
                </div>
              ))
            ) : (
              <p>No history available.</p>
            )}
          </div>
        </div>
        <div className='workout-content'>
          <h2>Today's Workout</h2>
          <div className='workout-section' onClick={() => handleSectionClick('Cardio')}>
            <img src={Cardio} alt='Cardio' className='section-image' />
            <div className='section-info'>
              <h3>Cardio</h3>
            </div>
          </div>
          <div className='workout-section' onClick={() => handleSectionClick('Chest')}>
            <img src={Chest} alt='Chest' className='section-image' />
            <div className='section-info'>
              <h3>Chest</h3>
            </div>
          </div>
          <div className='workout-section' onClick={() => handleSectionClick('Abs')}>
            <img src={Abs} alt='Abs' className='section-image' />
            <div className='section-info'>
              <h3>Abs</h3>
            </div>
          </div>
          <div className='workout-section' onClick={() => handleSectionClick('Arms')}>
            <img src={Arms} alt='Arms' className='section-image' />
            <div className='section-info'>
              <h3>Arms</h3>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Workout;.workout-sessions {
  margin-bottom: 20px;
}

.workout-sessions-title {
  background-color: #184d8b !important;
  padding: 10px;
  border-radius: 5px;
  cursor: pointer;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258) !important;
}

.sess-title {
  color: #ffffff;
  margin: 0;
  font-size: 18px;
}

.expandable-section {
  display: none;
}

.expandable-section.active {
  display: block;
  padding: 10px;
  background-color: #ffffff11;
  border-radius: 5px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258);
}

.exercise-item {
  display: flex;
  flex-direction: column;
  padding: 10px;
  margin-bottom: 10px;
  background-color: #ffffff22;
  border-radius: 5px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258);
}

.exercise-controls {
  display: flex;
  align-items: center;
  gap: 5px;
  margin-top: 5px;
  flex-wrap: wrap;
  max-width: 100%;
  padding: 5px 0;
}

.exercise-controls button {
  padding: 2px 8px;
  background-color: #000000;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  font-weight: bold;
  color: #ffffff;
  min-width: 20px;
  text-align: center;
}

.exercise-controls span {
  color: #000000;
  font-size: 14px;
  white-space: nowrap;
}

.bottom-controls {
  display: flex;
  justify-content: space-between;
  margin-top: 5px;
}

.tutorial-link {
  color: #007bff;
  text-decoration: none;
  font-size: 14px;
}

.tutorial-link:hover {
  text-decoration: underline;
}

.trash-btn {
  cursor: pointer;
}

.trash-btn:hover {
  background-color: #ff4d4d !important;
  color: #ffffff;
  border-radius: 50%;
  padding: 2px 8px;
  transition: 0.5s ease;
}

.calorie-info {
  margin-top: 5px;
  color: #28a745;
  font-weight: bold;
}

.total-calories {
  text-transform: uppercase;
  margin-top: 10px;
  padding: 5px;
  background-color: #ffffff22;
  border-radius: 5px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.258);
}

.total-calories span {
  color: #00ff3c;
  font-weight: bold;
}

.session-actions {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: 10px;
}

.add-btn {
  padding: 5px 10px;
  background-color: #dfdfdf;
  color: #000000;
  font-weight: bold;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 135px;
}

.add-btn:hover {
  background-color: #000000;
  color: #ffffff;
  transition: 0.5s ease;
}

.dropdown {
  display: flex;
  flex-direction: column;
  gap: 5px;
  margin-top: 5px;
  max-width: 100%;
}

.dropdown select {
  padding: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
  background-color: #ffffff;
  color: #000000;
  width: 100%;
  max-width: 200px;
}

.dropdown input {
  padding: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
  width: 100px;
  background-color: #ffffff;
  color: #000000;
  margin-right: 10px;
}

.dropdown button {
  padding: 5px 10px;
  background-color: #dfdfdf;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  width: 100px;
  align-self: flex-start;
}

.dropdown button:hover {
  background-color: #000000;
  color: #ffffff;
  transition: 0.5s ease;
}

.start-btn {
  padding: 5px 10px;
  background-color: #dfdfdf;
  color: #000000;
  font-weight: bold;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  width: 135px;
}

.start-btn:hover {
  background-color: #000000;
  color: #ffffff;
  transition: 0.5s ease;
}

.session-btns {
  display: flex;
  flex-direction: row;
  gap: 10px;
  margin-top: 10px;
}

.weight-input, .duration-input {
  margin: 5px 0;
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 14px;
  width: 80px;
  background-color: #ffffff;
  color: #000000;
}import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Plus, Trash2 } from 'react-feather';
import './CurrentSession.css';

function CurrentSession({ sessions, setSessions, exercises, user, updateSessionInFirestore, calculateCalories, calculateTotalCalories, startSession }) {
  const navigate = useNavigate();
  const [showCurrentSession, setShowCurrentSession] = useState(false);
  const [showDropdown, setShowDropdown] = useState(false);
  const [selectedExercise, setSelectedExercise] = useState('');
  const [selectedWeight, setSelectedWeight] = useState(0);
  const [selectedDuration, setSelectedDuration] = useState(0);
  const currentSession = sessions.length > 0 ? sessions[sessions.length - 1] : null;

  const addExerciseToSession = () => {
    if (!user || !selectedExercise || !currentSession) return;
    const username = user.displayName || user.email.split('@')[0];
    const exercise = exercises.find(e => e.id === selectedExercise);
    if (exercise) {
      const newExercise = {
        id: exercise.id,
        name: exercise.name,
        reps: exercise.type === 'cardio' ? 0 : 0,
        laps: 0,
        weight: exercise.type === 'cardio' ? 0 : selectedWeight,
        duration: exercise.type === 'cardio' ? selectedDuration : 0,
        videoUrl: exercise.videoUrl,
        minCalories: exercise.minCalories || 10,
        type: exercise.type,
        met: exercise.met || 3, // Default MET if not provided
        sets: exercise.sets || 1 // Default sets if not provided
      };
      const updatedSession = {
        ...currentSession,
        exercises: [...currentSession.exercises, newExercise]
      };
      const updatedSessions = [...sessions];
      updatedSessions[sessions.length - 1] = updatedSession;
      setSessions(updatedSessions);
      setShowDropdown(false);
      setSelectedExercise('');
      setSelectedWeight(0);
      setSelectedDuration(0);
      updateSessionInFirestore(username, updatedSessions);
    }
  };

  const updateRepsLaps = (index, field, delta) => {
    if (!currentSession) return;
    const username = user.displayName || user.email.split('@')[0];
    const updatedSession = { ...currentSession };
    const exercise = updatedSession.exercises[index];
    if (exercise.type === 'cardio' && field === 'reps') {
      updatedSession.exercises[index].duration = Math.max(0, (exercise.duration || 0) + delta);
    } else if (exercise.type !== 'cardio' && field === 'weight') {
      updatedSession.exercises[index].weight = Math.max(0, (exercise.weight || 0) + delta);
    } else {
      updatedSession.exercises[index][field] = Math.max(0, (exercise[field] || 0) + delta);
    }
    const updatedSessions = [...sessions];
    updatedSessions[sessions.length - 1] = updatedSession;
    setSessions(updatedSessions);
    updateSessionInFirestore(username, updatedSessions);
  };

  const updateWeight = (index, value) => {
    if (!currentSession) return;
    const username = user.displayName || user.email.split('@')[0];
    const updatedSession = { ...currentSession };
    updatedSession.exercises[index].weight = Math.max(0, parseInt(value));
    const updatedSessions = [...sessions];
    updatedSessions[sessions.length - 1] = updatedSession;
    setSessions(updatedSessions);
    updateSessionInFirestore(username, updatedSessions);
  };

  const removeExercise = (index) => {
    if (!currentSession) return;
    const username = user.displayName || user.email.split('@')[0];
    const updatedSession = { ...currentSession };
    updatedSession.exercises.splice(index, 1);
    const updatedSessions = [...sessions];
    updatedSessions[sessions.length - 1] = updatedSession;
    setSessions(updatedSessions);
    updateSessionInFirestore(username, updatedSessions);
  };

  return (
    <div className='workout-sessions'>
      <div className='workout-sessions-title' onClick={() => setShowCurrentSession(!showCurrentSession)}>
        <p className='sess-title'>Current Session</p>
      </div>
      <div className={showCurrentSession ? 'expandable-section active' : 'expandable-section'}>
        {currentSession ? (
          <div>
            <h3>Session Date: {new Date(currentSession.date).toLocaleString()}</h3>
            {currentSession.exercises.map((exercise, index) => (
              <div key={index} className='exercise-item'>
                <p>{exercise.name}: {exercise.type === 'cardio' ? `${exercise.duration} min, ${exercise.laps} laps` : `${exercise.reps} reps, ${exercise.laps} laps, ${exercise.weight} kg`}</p>
                <div className='exercise-controls'>
                  {exercise.type === 'cardio' ? (
                    <>
                      <button onClick={() => updateRepsLaps(index, 'duration', -1)}>-</button>
                      <span> Min </span>
                      <button onClick={() => updateRepsLaps(index, 'duration', 1)}>+</button>
                      <span> </span>
                      <button onClick={() => updateRepsLaps(index, 'laps', -1)}>-</button>
                      <span> Laps </span>
                      <button onClick={() => updateRepsLaps(index, 'laps', 1)}>+</button>
                    </>
                  ) : (
                    <>
                      <button onClick={() => updateRepsLaps(index, 'reps', -1)}>-</button>
                      <span> Reps </span>
                      <button onClick={() => updateRepsLaps(index, 'reps', 1)}>+</button>
                      <span> </span>
                      <button onClick={() => updateRepsLaps(index, 'laps', -1)}>-</button>
                      <span> Laps </span>
                      <button onClick={() => updateRepsLaps(index, 'laps', 1)}>+</button>
                      <span> </span>
                      <input
                        type="range"
                        min="0"
                        max="200"
                        value={exercise.weight || 0}
                        onChange={(e) => updateWeight(index, e.target.value)}
                        className="weight-slider"
                      />
                      <span> Weight: {exercise.weight} kg </span>
                    </>
                  )}
                </div>
                <div className='bottom-controls'>
                  <div>
                    <a href={exercise.videoUrl} target="_blank" rel="noopener noreferrer" className="tutorial-link">Tutorial</a>
                  </div>
                  <div className='trash-btn'>
                    <Trash2 size={18} color="#8b0000" onClick={() => removeExercise(index)} />
                  </div>
                </div>
                <span className='calorie-info'>Calories: {calculateCalories(exercise)} kcal</span>
              </div>
            ))}
            <div className='total-calories'>
              <span>Total Calories: {calculateTotalCalories()} kcal</span>
            </div>
            <div className='session-actions'>
              <button className='add-btn' onClick={() => setShowDropdown(!showDropdown)}>
                <Plus size={18} style={{ translate: '-4px 0px' }} color="#000000" />
                Add Exercise
              </button>
              {showDropdown && (
                <div className='dropdown'>
                  <select value={selectedExercise} onChange={(e) => setSelectedExercise(e.target.value)}>
                    <option value="">Select Exercise</option>
                    {exercises.map((exercise) => (
                      <option key={exercise.id} value={exercise.id}>{exercise.name}</option>
                    ))}
                  </select>
                  <button onClick={addExerciseToSession}>Add</button>
                </div>
              )}
              <button className='start-btn' onClick={startSession}>Start Session</button>
            </div>
          </div>
        ) : (
          <p>No current session available.</p>
        )}
      </div>
    </div>
  );
}

export default CurrentSession;